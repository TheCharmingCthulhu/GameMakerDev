<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialization
randomize();

// Speed
spd = random(5) + 5;
spd_limit = 25;

// Set direction
var dir = 0;
do { randomize(); dir = random_range(-1, 1); } until (dir != 0);

// Launch direction
vel_x = spd * dir;
vel_y = spd * -1;

// Properties
image_speed = 0;
fake = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update ball's movement

x += vel_x;
y += vel_y;

// Damp velocity
var damp_limit = 5;
if (abs(vel_x) &gt; damp_limit) 
    vel_x = vel_x * 0.995;

// Limit boundary
if (x + sprite_width + 2 &gt; room_width){
    x -= 1;
    vel_x = -vel_x;
}
if (x - 2 &lt; 0){
    x += 1;
    vel_x = -vel_x;
}

if (y &lt; 0){
    y += 1;
    vel_y = -vel_y;
}

// Reset ball
if (y + sprite_height &gt; room_height){
    x = room_width / 2 - sprite_width / 2;
    y = room_height / 2 - sprite_height / 2;
    
    vel_x = spd * 1;
    vel_y = spd * -1;
    
    if (!fake) lives -= 1;
    if (fake) instance_destroy();
}

// Freeze ball on game over..
if (lives &lt;= 0){
    vel_x = 0;
    vel_y = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_brick">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy &amp; bounce off brick.
// Test angle of x1,y1 -&gt; x2,y2
var collision_dir = collision_direction(x, y, other.x, other.y);

// Validate collision direction.
var LEFT = 0, RIGHT = 4, TOP = 3, BOTTOM = 1, OFFSET = 2;
switch(collision_dir){
    case LEFT:
        x += OFFSET;
        vel_x = -vel_x;
    break;
    
    case TOP: 
        y += OFFSET;
        vel_y = -vel_y;
    break;
    
    case RIGHT:
        x += OFFSET;
        vel_x = -vel_x;
    break;
    
    case BOTTOM: 
        y -= OFFSET;
        vel_y = -vel_y;
    break;
}

with(other) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>701</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_score</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>score+1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ball">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bounce
// Test angle of x1,y1 -&gt; x2,y2
var collision_dir = collision_direction(x, y, other.x, other.y);

// Validate collision direction.
var LEFT = 0, RIGHT = 4, TOP = 3, BOTTOM = 1, OFFSET = 3;
switch(collision_dir){
    case LEFT:
        x += OFFSET;
        vel_x = -vel_x;
    break;
    
    case TOP: 
        y += OFFSET;
        vel_y = -vel_y;
    break;
    
    case RIGHT:
        x += OFFSET;
        vel_x = -vel_x;
    break;
    
    case BOTTOM: 
        y -= OFFSET;
        vel_y = -vel_y;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_paddle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision updates direction
vel_y = -vel_y;

// Calculate the direction based on the current delta off the collision.
vel_x = -((other.x + (other.sprite_width / 2)) - (x + (sprite_width / 2)));

// Increase speed until limit reached.
if (vel_x &lt; spd_limit and vel_x &gt; -spd_limit) vel_x = vel_x * BALL_SPEED_INCREASE;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
