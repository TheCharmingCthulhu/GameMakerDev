<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialization

// Setup
spd = 5;
vel[0] = 0;
vel[1] = 0;

// Collision map
cmap = ds_list_solid_objects();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inventory
inv_w = 3;
inv_h = 4;

inv = ds_grid_create(inv_w, inv_h);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keyboard
var kb_style = 1;

if (kb_style == 0){
    ply_left = vk_left;
    ply_right = vk_right;
    ply_up = vk_up;
    ply_down = vk_down;
    ply_action = vk_space;
}
else if (kb_style == 1){
    ply_left = ord('A');
    ply_right = ord('D');
    ply_up = ord('W');
    ply_down = ord('S');
    ply_action = vk_space;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Depth
var inst = noone;

// Set depth based on side.
inst = collision_all(x, y + spd, id);
if (inst != -1) depth = inst.depth + 1;
inst = collision_all(x, y - spd, id);
if (inst != -1) depth = inst.depth - 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement
var lerpfactor = 0.7;

if (keyboard_check(ply_left)){
    vel[0] = -spd;
} else if (keyboard_check(ply_right)){
    vel[0] = spd;
} else vel[0] = lerp(0, vel[0], lerpfactor) 

if (keyboard_check(ply_up)){
    vel[1] = -spd;
} else if (keyboard_check(ply_down)){
    vel[1] = spd;
} else vel[1] = lerp(0, vel[1], lerpfactor);

if(!collision_ds_list(x + vel[0], y, cmap)) x += vel[0];
if(!collision_ds_list(x, y + vel[1], cmap)) y += vel[1];

// Bounce on collision...
if (collision_ds_list(x + 1, y, cmap)) x -= 1;
if (collision_ds_list(x - 1, y, cmap)) x += 1;
if (collision_ds_list(x, y + 1, cmap)) y -= 1;
if (collision_ds_list(x, y - 1, cmap)) y += 1;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Actions

if (keyboard_check(ply_action)){
    // Test if player over an object.
    var inst = collision_all(x, y, id);
    if (inst != -1){
        with(inst){
            switch (inst.object_index)
            {
                case obj_key: 
                    if (ds_grid_next_add(other.inv, obj_key)) 
                        instance_destroy();
                break;
                
                case obj_trigger:
                    switch(trigger_type){
                        case trigger_types.door:
                            if (ds_grid_contains(other.inv, obj_key)) 
                                script_execute(scr_trigger_open_door, self);
                        break;
                    }
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
